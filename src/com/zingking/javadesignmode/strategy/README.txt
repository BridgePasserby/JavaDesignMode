策略模式
Strategy Pattern
1.定义
Define a family of algorithms,encapsulate each one,and make therm interchangeable.
定义一族算法，将每个算法都封装起来，并且使它们之间可以互换。

2.组成
①Strategy抽象策略角色
策略、算法家族的抽象，一般为接口，定义每个策略或算法必须具有的方法和属性
②ConcreteStrategy具体策略角色
实现抽象策略中的操作，含有具体的算法
③Context封装角色
也叫上下文角色，承上启下的作用，屏蔽高层模块对策略、算法的之间访问，封装可能存在的变化

3.优缺点
优点
①算法可以自由切换
只要实现抽象策略，就是策略家族的一个成员，通过封装角色对其进行封装，保证对外提供“可自由切换”的策略
②避免使用多重添加判断？？
③扩展性良好
在现有系统中增加一个策略只要实现接口就可以了，其他都不用修改

缺点
①策略类数量增多
每个策略都是一个类，复用性小，类数量增多
②所有的策略类都需要对外暴露
上层模块必须知道有哪些策略，然后才能决定使用哪一个。可以通过工厂方法、代理、享元模式来弥补。

4.适用场景
①多个类只有在算法或者行为上稍有不同
②算法需要自由切换
③需要屏蔽算法规则的场景
注意：策略数量如果超过了4个，就要考虑适用混合模式，解决策略类膨胀和对外暴露的问题，否则以后很难维护。

5.demo
简单的计算器引入策略模式

6.与代理模式的区别
代理模式：代理类和真实类都必须实现同一个接口
策略模式：策略封装类和策略类 不 需要实现同一个接口，如果实现了同一个接口就变成了代理模式









