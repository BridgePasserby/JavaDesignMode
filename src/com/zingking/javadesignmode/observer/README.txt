Observer Pattern
观察者模式(发布-订阅模式)：
Define a one-to-many dependency between objects so that when one object changes state,
all it's dependents are notified and updated automatically.
定义对象间一种一对多的依赖关系，当一个对象状态发生改变时，所有依赖于它的对象都会得到通知并被自动更新。
(上述“依赖”是指广泛依赖，观察者模式在UML类图中是关联关系)

通俗的讲：一堆东西对一个东西的变化很敏感，当这个东西发生改变的时候，这一堆东西都即时做出反应

A(N个)对象（观察者）对B对象（被观察者）的某种变化高度敏感，需要在B变化的一瞬间做出反应。
与现实中警察抓小偷不同的是：
1.观察者不需要时刻盯着被观察者(A不需要每隔1ms就检查一次B的状态)
2.注册(_Register_)或者成为订阅(_Subscribe_)的方式告诉被观察者:我需要你的某某状态，你要在它变化时通知我，即被观察者持有
多个观察者的引用。
采用这种被动观察的模式，减少了资源消耗，提高反应速度

例如：
在购票系统中，票务模块是被观察者，短信模块、活动模块、数据库模块是观察者

实际开发过程中，要考虑多实例对象(ArrayList/Vector)的同步问题，如果观察者太多可能会阻塞被观察者的逻辑，这时候就要考虑异步
处理。